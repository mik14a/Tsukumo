using Newtonsoft.Json;

namespace OpenAI.Models.ChatCompletion
{
    /// <summary>
    /// Chat completion choices
    /// </summary>
    public class Choice
    {
        /// <summary>
        /// The reason the model stopped generating tokens.
        /// </summary>
        public static class FinishReasons
        {
            /// <summary>
            /// The model stopped because it hit a natural stop point or a provided stop sequence.
            /// </summary>
            public const string Stop = "stop";
            /// <summary>
            /// The model stopped because the maximum number of tokens specified in the request was reached.
            /// </summary>
            public const string Length = "length";
            /// <summary>
            /// The model stopped because content was omitted due to a flag from our content filters.
            /// </summary>
            public const string ContentFilter = "content_filter";
            /// <summary>
            /// The model stopped because it called a tool.
            /// </summary>
            public const string ToolCalls = "tool_calls";
        }

        /// <summary>
        /// The reason the model stopped generating tokens.
        /// This will be stop if the model hit a natural stop point or a provided stop sequence,
        /// length if the maximum number of tokens specified in the request was reached,
        /// content_filter if content was omitted due to a flag from our content filters,
        /// tool_calls if the model called a tool,
        /// or function_call (deprecated) if the model called a function.
        /// </summary>
        [JsonProperty("finish_reason")]
        public string FinishReason { get; set; }
        /// <summary>
        /// The index of the choice in the list of choices.
        /// </summary>
        [JsonProperty("index")]
        public int Index { get; set; }
        /// <summary>
        /// A chat completion message generated by the model.
        /// </summary>
        [JsonProperty("message")]
        public ChoiceMessage Message { get; set; }
        /// <summary>
        /// Gets or sets the delta message for the stream chat completion.
        /// This property is an alias for the Message property.
        /// </summary>
        [JsonProperty("delta")]
        public ChoiceMessage Delta {
            get => Message;
            set => Message = value;
        }
        /// <summary>
        /// Log probability information for the choice.
        /// </summary>
        [JsonProperty("logprobs")]
        public Logprobs Logprobs { get; set; }
    }
}
